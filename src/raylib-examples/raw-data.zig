const std = @import("std");

pub const rl = @cImport({
    @cInclude("raylib.h");
});

const resources = "libs/raylib/examples/textures/resources/";

pub fn run() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer if (gpa.deinit() == .leak) std.debug.print("LEAKING MEMORY!", .{});
    const allocator = gpa.allocator();

    const screenWidth = 800;
    const screenHeight = 450;

    rl.InitWindow(screenWidth, screenHeight, "raylib [textures] example - texture from raw data");
    defer rl.CloseWindow();

    var fudesumi: rl.Texture2D = undefined;
    defer rl.UnloadTexture(fudesumi);

    var checked: rl.Texture2D = undefined;
    defer rl.UnloadTexture(checked);

    {
        const fudesumiRaw = rl.LoadImageRaw(resources ++ "fudesumi.raw", 384, 521, rl.PIXELFORMAT_UNCOMPRESSED_R8G8B8A8, 0);
        defer rl.UnloadImage(fudesumiRaw);

        fudesumi = rl.LoadTextureFromImage(fudesumiRaw);
    }

    {
        const width = 960;
        const height = 480;

        var pixels: []rl.Color = try allocator.alloc(rl.Color, width * height);
        defer allocator.free(pixels);

        for (0..height) |y| {
            for (0..width) |x| {
                if (((x / 32 + y / 32) / 1) % 2 == 0) {
                    pixels[y * width + x] = rl.ORANGE;
                } else {
                    pixels[y * width + x] = rl.GOLD;
                }
            }
        }

        var checkedIm = rl.Image{
            .data = pixels.ptr,
            .width = width,
            .height = height,
            .format = rl.PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,
            .mipmaps = 1,
        };
        // rl.UnloadImage(checkedIm)  // NOTE: do not unload as it calls free() on Image.data

        checked = rl.LoadTextureFromImage(checkedIm);
    }

    rl.SetTargetFPS(60);

    while (!rl.WindowShouldClose()) {
        { // Update

        }

        { // Draw
            rl.BeginDrawing();
            defer rl.EndDrawing();

            rl.ClearBackground(rl.RAYWHITE);

            rl.DrawTexture(
                checked,
                @divTrunc(screenWidth - checked.width, 2),
                @divTrunc(screenHeight - checked.height, 2),
                rl.Fade(rl.WHITE, 0.5),
            );
            rl.DrawTexture(fudesumi, 430, -30, rl.WHITE);

            rl.DrawText("CHECKED TEXTURE ", 84, 85, 30, rl.BROWN);
            rl.DrawText("GENERATED by CODE", 72, 148, 30, rl.BROWN);
            rl.DrawText("and RAW IMAGE LOADING", 46, 210, 30, rl.BROWN);

            rl.DrawText("(c) Fudesumi sprite by Eiden Marsal", 310, screenHeight - 20, 10, rl.BROWN);
        }
    }
}
